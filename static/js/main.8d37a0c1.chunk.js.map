{"version":3,"sources":["components/ExternalResources.js","components/AnswerInputs.js","components/prompts/CommonUI.js","components/prompts/MissingOperatorPrompt.js","components/prompts/MissingAnswerPrompt.js","components/prompts/index.js","components/prompts/ConvertToBase10Prompt.js","components/prompts/ConvertToBase2Prompt.js","logic/constants.js","logic/bitwiseMath.js","logic/index.js","logic/missingAnswerProblem.js","logic/missingOperatorProblem.js","logic/conversionProblem.js","App.js","serviceWorker.js","index.js"],"names":["ExternalResources","react_default","a","createElement","Resources","href","target","rel","index_es","icon","faQuestionCircle","faGithub","faTwitter","styled","div","_templateObject","AnswerInputs","props","answerOptions","hasCorrectAnswer","shouldShowReset","shouldShowHints","isBackspaceDisabled","onAnswerClick","onSubmitClick","onResetClick","onNextClick","onBackspaceClick","Inputs","Fragment","AnswerInputSection","map","answer","i","ButtonWrapper","key","Button","onClick","_","InputHint","InputSection","SubmitButton","faCheck","ControlButton","isIcon","faUndo","isDisabled","faBackspace","SuccessButton","isActive","role","aria-label","AnswerInputs_templateObject","_templateObject2","p","_templateObject3","button","attrs","type","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","Prompt","CommonUI_templateObject","_ref","hasLabels","css","CommonUI_templateObject2","PromptInput","CommonUI_templateObject3","hasAnswer","Operand","span","CommonUI_templateObject4","CommonUI_templateObject5","ConversionOperand","CommonUI_templateObject6","Equality","CommonUI_templateObject7","_ref2","shouldHaveTopMargin","CommonUI_templateObject8","DeepEquality","EquationHalf","CommonUI_templateObject9","_ref3","_templateObject10","Label","small","_templateObject11","AnswerSlots","_templateObject12","Output","MissingOperatorPrompt_templateObject","Operator","MissingAnswerPrompt_templateObject","promptForType","missingAnswer","userAnswer","userActiveAnswerIndex","problem","onPromptClick","isBinary","operands","operator","promptLength","slots","Array","fill","CommonUI_Prompt","MissingAnswerPrompt_Operator","CommonUI_DeepEquality","missingOperator","output","convertToBase10","base2","convertToBase2","base10","getPromptForType","promptType","bitOperators","binary","unary","conversionNumberCeiling","missingComponentOperandCeiling","bitShiftCeiling","makeRandomOperator","operatorClass","arguments","length","undefined","Math","random","classOperations","floor","operandCount","isOperatorBitShift","leftPadString","strToPad","desiredLength","padCharacter","padLength","pad","join","concat","calculateOutput","toString","split","bit","calculateBase10Output","problemGenerators","_makeRandomOperator","base10Random","push","unPaddedAnswer","op","maxOperandLength","max","apply","Object","toConsumableArray","operand","answers","unPaddedOutput","result","filter","findAllCorrectOperators","__isOriginalOperatorBitShift","answerNumber","makeRandomProblem","randomIndex","answerOptionsForType","getAnswerOptionsForType","answerInputsTypesWithHints","getShouldShowInputHintsForType","indexOf","Logo","h1","App_templateObject","flashRed","keyframes","App_templateObject2","AppWrapper","App_templateObject3","isCorrect","hasResult","App_templateObject4","PracticeProblem","App_templateObject5","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setProblem","_useState3","_useState4","setUserAnswer","hasPartialAnswer","findIndex","hasCompleteAnswer","_useState5","_useState6","activeAnswer","setActiveAnswer","_useState7","_useState8","isResultCorrect","setIsResultCorrect","handleKeyDown","e","preventDefault","handleKeyUp","shiftKey","handleKeyboardAnswerUpdate","test","answerIndex","parseInt","handleNext","handleSubmit","handleResetAnswer","handleBackspace","resetAnswerValue","handleAnswerUpdate","find","nextProblem","document","activeElement","blur","newUserAnswer","currentAnswerCopy","slice","useEffect","addEventListener","removeEventListener","promptProps","inputsProps","assign","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d37a0c1.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub, faTwitter } from \"@fortawesome/fontawesome-free-brands\";\n\nexport default () => (\n  <Resources>\n    <a\n      href=\"https://github.com/btbright/learn-a-bit/blob/master/README.md\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <FontAwesomeIcon icon={faQuestionCircle} />\n    </a>\n    <a\n      href=\"https://github.com/btbright/learn-a-bit\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <FontAwesomeIcon icon={faGithub} />\n    </a>\n    <a\n      href=\"https://twitter.com/btbright\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <FontAwesomeIcon icon={faTwitter} />\n    </a>\n  </Resources>\n);\n\nconst Resources = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  display: flex;\n\n  a {\n    font-size: 1.35rem;\n    color: rgba(0, 0, 0, 0.1);\n    margin: 0 3px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBackspace,\n  faUndo,\n  faCheck\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function AnswerInputs(props) {\n  const {\n    answerOptions,\n    hasCorrectAnswer,\n    shouldShowReset,\n    shouldShowHints,\n    isBackspaceDisabled\n  } = props;\n\n  const {\n    onAnswerClick,\n    onSubmitClick,\n    onResetClick,\n    onNextClick,\n    onBackspaceClick\n  } = props;\n\n  return (\n    <Inputs>\n      {!hasCorrectAnswer && (\n        <>\n          <AnswerInputSection>\n            {answerOptions.map((answer, i) => (\n              <ButtonWrapper key={answer}>\n                <Button onClick={_ => onAnswerClick(answer)}>{answer}</Button>\n                {shouldShowHints && <InputHint> {i + 1}</InputHint>}\n              </ButtonWrapper>\n            ))}\n          </AnswerInputSection>\n          <InputSection>\n            <SubmitButton onClick={onSubmitClick}>\n              Submit&nbsp;\n              <FontAwesomeIcon icon={faCheck} />\n            </SubmitButton>\n            {shouldShowReset ? (\n              <ControlButton isIcon={true} onClick={onResetClick}>\n                <FontAwesomeIcon icon={faUndo} />\n              </ControlButton>\n            ) : (\n              <ControlButton onClick={onNextClick}>New</ControlButton>\n            )}\n            <ControlButton\n              isDisabled={isBackspaceDisabled}\n              isIcon={true}\n              onClick={onBackspaceClick}\n            >\n              <FontAwesomeIcon icon={faBackspace} />\n            </ControlButton>\n          </InputSection>\n        </>\n      )}\n      {hasCorrectAnswer && (\n        <SuccessButton onClick={onNextClick} isActive={true}>\n          Continue&nbsp;&nbsp;\n          <span role=\"img\" aria-label=\"Hooray!\">\n            🎉\n          </span>\n        </SuccessButton>\n      )}\n    </Inputs>\n  );\n}\n\nconst Inputs = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: flex-start;\n  width: 40%;\n  max-height: 200px;\n  min-height: 120px;\n  margin-top: 4rem;\n\n  @media (max-width: 500px) {\n    width: 90%;\n  }\n  @media (max-width: 500px) {\n    position: absolute;\n    bottom: 50px;\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin: 0 4px;\n\n  @media (max-width: 500px) {\n    width: auto;\n    margin: 4px;\n  }\n`;\n\nconst InputHint = styled.p`\n  font-size: 0.5rem;\n  color: rgba(0, 0, 0, 0.3);\n  margin: 5px 0 0px;\n\n  @media (max-width: 500px) {\n    display: none;\n  }\n`;\n\nconst Button = styled.button.attrs({ type: \"button\" })`\n  height: 40px;\n  width: 100%;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  color: rgba(0, 0, 0, 0.7);\n  font-size: 1.2rem;\n  transition: background-color 0.2s;\n  cursor: pointer;\n  outline: none;\n  margin: 0 4px;\n  background-color: ${props =>\n    props.isActive ? \"rgba(0, 0, 0, 0.03)\" : \"rgba(0, 0, 0, 0.02)\"};\n  border-color: ${props =>\n    props.isActive ? \"rgba(0, 0, 0, 0.15)\" : \"rgba(0, 0, 0, 0.12)\"};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(0, 0, 0, 0.03);\n    border-color: rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst SubmitButton = styled(Button)`\n  width: 100%;\n  font-size: 0.85rem;\n  color: rgba(0, 0, 0, 0.3);\n`;\n\nconst ControlButton = styled(Button)`\n  color: rgba(0, 0, 0, 0.3);\n  flex-shrink: 0;\n  width: 40px;\n  opacity: ${props => (props.isDisabled ? 0.2 : 1)};\n  font-size: ${props => (props.isIcon ? \"1.2rem\" : \"0.7rem\")};\n`;\n\nconst SuccessButton = styled(Button)`\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 90px;\n`;\n\nconst InputSection = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-top: 4px;\n`;\n\nconst AnswerInputSection = styled(InputSection)`\n  min-height: 130px;\n\n  @media (max-width: 500px) {\n    flex-wrap: wrap;\n  }\n`;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nexport const Prompt = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 29px;\n\n  p {\n    color: rgba(0, 0, 0, 0.8);\n    font-size: 2rem;\n  }\n\n  @media (max-width: 500px) {\n    flex-direction: column;\n    margin-bottom: 58px;\n    align-items:center;\n  }\n\n  ${({ hasLabels }) =>\n    hasLabels &&\n    css`\n      align-items: flex-start;\n    `}\n`;\n\nexport const PromptInput = styled.div`\n  border: none;\n  margin: 0 4px;\n  font-size: 2rem;\n  width: 2.5rem;\n  height: 2.5rem;\n  outline: none;\n  text-align: center;\n  transition: border-color 0.05s, background-color 0.05;\n  color: rgba(0, 0, 0, 0.8);\n  background-color: ${props =>\n    props.isActive\n      ? \"rgba(0, 0, 0, 0.075)\"\n      : props.hasAnswer\n      ? \"rgba(0, 0, 0, 0.0)\"\n      : \"rgba(0, 0, 0, 0.02)\"};\n  border-radius: 0.2rem;\n  cursor: pointer;\n`;\n\nexport const Operator = styled.span`\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 2rem;\n`;\n\nexport const Operand = styled.span`\n  color: rgba(0, 0, 0, 0.8);\n  font-size: 2rem;\n  margin: 0 1rem;\n\n  &:first-child {\n    margin-left: 0;\n  }\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const ConversionOperand = styled(Operand)`\n  margin: 0;\n`;\n\nconst Equality = styled.div`\n  color: rgba(0, 0, 0, 0.3);\n  font-size: 1.4rem;\n  margin: 0 1rem;\n\n  ${({ shouldHaveTopMargin }) =>\n    shouldHaveTopMargin &&\n    css`\n      margin-top: 5px;\n    `}\n`;\n\nexport const DeepEquality = props => <Equality {...props}>===</Equality>;\n\nexport const EquationHalf = styled.div`\n  display: flex;\n\n  ${({ hasLabels }) =>\n    hasLabels &&\n    css`\n      flex-direction: column;\n      align-items: center;\n    `}\n\n  @media (max-width: 500px) {\n    margin: 1rem 0;\n  }\n`;\n\nexport const Label = styled.small`\n  font-size: 0.8rem;\n  color: rgba(0, 0, 0, 0.2);\n  margin-top: 14px;\n`;\n\nexport const AnswerSlots = styled.div`\n  display: flex;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  Operand,\n  DeepEquality\n} from \"./CommonUI\";\n\nexport default function MissingOperatorPrompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { operands, output } = problem;\n  return (\n    <Prompt>\n      <EquationHalf>\n        <Operand>{operands[0]}</Operand>{\" \"}\n        <PromptInput\n          isActive={0 === userActiveAnswerIndex}\n          hasAnswer={userAnswer[0] !== \"\"}\n          onClick={_ => onPromptClick(0)}\n        >\n          {userAnswer[0]}\n        </PromptInput>\n        <Operand>{operands[1]}</Operand>{\" \"}\n      </EquationHalf>\n      <DeepEquality />\n      <EquationHalf>\n        <Output>{output}</Output>\n      </EquationHalf>\n    </Prompt>\n  );\n}\n\nconst Output = styled(Operand)``;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  Operand,\n  DeepEquality\n} from \"./CommonUI\";\n\nexport default function MissingAnswerPrompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { isBinary, operands, operator, promptLength } = problem;\n  const slots = new Array(promptLength).fill(\"\");\n  return (\n    <Prompt>\n      <EquationHalf>\n        {isBinary && <Operand>{operands[0]}</Operand>}{\" \"}\n        <Operator>{operator}</Operator>\n        {isBinary && \" \"}\n        <Operand>{operands[isBinary ? 1 : 0]}</Operand>{\" \"}\n      </EquationHalf>\n      <DeepEquality />\n      <EquationHalf>\n        {slots.map((_, i) => (\n          <PromptInput\n            key={i}\n            isActive={i === userActiveAnswerIndex}\n            hasAnswer={userAnswer[i] !== \"\"}\n            onClick={_ => onPromptClick(i)}\n          >\n            {userAnswer[i]}\n          </PromptInput>\n        ))}\n      </EquationHalf>\n    </Prompt>\n  );\n}\n\nconst Operator = styled.span`\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 2rem;\n`;\n","import MissingOperatorPrompt from \"./MissingOperatorPrompt\";\nimport MissingAnswerPrompt from \"./MissingAnswerPrompt\";\nimport ConvertToBase10Prompt from \"./ConvertToBase10Prompt\";\nimport ConvertToBase2Prompt from \"./ConvertToBase2Prompt\";\n\nconst promptForType = {\n  missingAnswer: MissingAnswerPrompt,\n  missingOperator: MissingOperatorPrompt,\n  convertToBase10: ConvertToBase10Prompt,\n  convertToBase2: ConvertToBase2Prompt\n};\n\nexport const getPromptForType = promptType => promptForType[promptType];\n","import React from \"react\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  ConversionOperand,\n  DeepEquality,\n  Label,\n  AnswerSlots\n} from \"./CommonUI\";\n\nexport default function ConvertToBase10Prompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { base2, promptLength } = problem;\n  const slots = new Array(promptLength).fill(\"\");\n  return (\n    <Prompt hasLabels={true}>\n      <EquationHalf hasLabels={true}>\n        <ConversionOperand>{base2}</ConversionOperand>\n        <Label>base 2</Label>\n      </EquationHalf>\n      <DeepEquality shouldHaveTopMargin={true} />\n      <EquationHalf hasLabels={true}>\n        <AnswerSlots>\n          {slots.map((_, i) => (\n            <PromptInput\n              key={i}\n              isActive={i === userActiveAnswerIndex}\n              hasAnswer={userAnswer[i] !== \"\"}\n              onClick={_ => onPromptClick(i)}\n            >\n              {userAnswer[i]}\n            </PromptInput>\n          ))}\n        </AnswerSlots>\n        <Label>base 10</Label>\n      </EquationHalf>\n    </Prompt>\n  );\n}","import React from \"react\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  ConversionOperand,\n  DeepEquality,\n  Label,\n  AnswerSlots\n} from \"./CommonUI\";\n\nexport default function ConvertToBase2Prompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { base10, promptLength } = problem;\n  const slots = new Array(promptLength).fill(\"\");\n  return (\n    <Prompt hasLabels={true}>\n      <EquationHalf hasLabels={true}>\n        <ConversionOperand>{base10}</ConversionOperand>\n        <Label>base 10</Label>\n      </EquationHalf>\n      <DeepEquality shouldHaveTopMargin={true} />\n      <EquationHalf hasLabels={true}>\n        <AnswerSlots>\n          {slots.map((_, i) => (\n            <PromptInput\n              key={i}\n              isActive={i === userActiveAnswerIndex}\n              hasAnswer={userAnswer[i] !== \"\"}\n              onClick={_ => onPromptClick(i)}\n            >\n              {userAnswer[i]}\n            </PromptInput>\n          ))}\n        </AnswerSlots>\n        <Label>base 2</Label>\n      </EquationHalf>\n    </Prompt>\n  );\n}\n\n","export const bitOperators = {\n  binary: [\"&\", \"|\", \"^\", \"<<\", \">>\"],\n  unary: [\"~\"]\n};\n\nexport const conversionNumberCeiling = 16;\nexport const missingComponentOperandCeiling = 16;\nexport const bitShiftCeiling = 3;\n","import { bitOperators } from \"./constants\";\n\nexport function makeRandomOperator(shouldIncludeUnary = true) {\n  const operatorClass = shouldIncludeUnary\n    ? Math.random() < bitOperators.unary.length / bitOperators.binary.length\n      ? \"unary\"\n      : \"binary\"\n    : \"binary\";\n  const isBinary = operatorClass === \"binary\";\n  const classOperations = bitOperators[operatorClass];\n  const operator =\n    classOperations[Math.floor(Math.random() * classOperations.length)];\n  const operandCount = isBinary ? 2 : 1;\n  const isOperatorBitShift = operator === \"<<\" || operator === \">>\";\n\n  return {\n    operator,\n    operandCount,\n    isOperatorBitShift,\n    isBinary\n  };\n}\n\nexport function leftPadString(strToPad, desiredLength, padCharacter = \"0\") {\n  const padLength =\n    desiredLength > strToPad.length ? desiredLength - strToPad.length : 0;\n  const pad = new Array(padLength).fill(padCharacter).join(\"\");\n  return `${pad}${strToPad}`;\n}\n\nexport function calculateOutput(operator, operands) {\n  const base10Answer = calculateBase10Output(operator, operands);\n  return base10Answer.toString(2);\n}\n\nexport function calculateBase10Output(operator, operands) {\n  switch (operator) {\n    case \"&\":\n      return operands[0] & operands[1];\n    case \"|\":\n      return operands[0] | operands[1];\n    case \"^\":\n      return operands[0] ^ operands[1];\n    case \"~\":\n      // javascript uses 32 bit signed ints in two's complement format\n      // which returns a different result for bitwise not. one's complement\n      // is easier to learn\n      return bitwiseNotOnesComplement(operands[0]);\n    case \"<<\":\n      return operands[0] << operands[1];\n    case \">>\":\n      return operands[0] >> operands[1];\n    default:\n      return;\n  }\n}\n\nexport function bitwiseNotOnesComplement(num) {\n  const binaryString = num.toString(2);\n  return binaryString\n    .split(\"\")\n    .map(bit => (bit === \"0\" ? \"1\" : \"0\"))\n    .join(\"\");\n}\n","import { makeMissingOperatorProblem } from \"./missingOperatorProblem\";\nimport { makeMissingAnswerProblem } from \"./missingAnswerProblem\";\nimport {\n  makeConvertToBase10Problem,\n  makeConvertToBase2Problem\n} from \"./conversionProblem\";\nimport { bitOperators } from \"./constants\";\n\nconst problemGenerators = [\n  makeMissingAnswerProblem,\n  makeMissingOperatorProblem,\n  makeConvertToBase10Problem,\n  makeConvertToBase2Problem\n];\n\nexport const makeRandomProblem = _ => {\n  const randomIndex = Math.floor(Math.random() * problemGenerators.length);\n  return problemGenerators[randomIndex]();\n};\n\nconst answerOptionsForType = {\n  missingAnswer: [\"1\", \"0\"],\n  missingOperator: bitOperators.binary,\n  convertToBase10: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n  convertToBase2: [\"1\", \"0\"]\n};\n\nexport const getAnswerOptionsForType = type => answerOptionsForType[type];\n\nconst answerInputsTypesWithHints = [\"missingOperator\"];\n\nexport const getShouldShowInputHintsForType = type => answerInputsTypesWithHints.indexOf(type) !== -1;\n","import {\n  makeRandomOperator,\n  calculateOutput,\n  leftPadString\n} from \"./bitwiseMath\";\nimport { missingComponentOperandCeiling, bitShiftCeiling } from \"./constants\";\n\nexport function makeMissingAnswerProblem() {\n  const {\n    operator,\n    operandCount,\n    isOperatorBitShift,\n    isBinary\n  } = makeRandomOperator();\n\n  // generate the operands\n  let operands = [];\n  if (!isOperatorBitShift) {\n    for (let i = 0; i < operandCount; i++) {\n      const base10Random = Math.floor(\n        Math.random() * missingComponentOperandCeiling\n      );\n      operands.push(base10Random);\n    }\n  } else {\n    const base10Random = Math.floor(\n      Math.random() * missingComponentOperandCeiling\n    );\n    operands.push(base10Random);\n    operands.push(Math.floor(Math.random() * bitShiftCeiling));\n  }\n\n  // generate the answer\n  const unPaddedAnswer = calculateOutput(operator, operands);\n\n  // convert operands to base-2\n  if (isOperatorBitShift) {\n    operands = [operands[0].toString(2), operands[1]];\n  } else {\n    operands = operands.map(op => op.toString(2));\n  }\n\n  // pad elements appropriately so base-2 operands\n  // and the answer will be of equal length\n  const maxOperandLength = Math.max(\n    ...operands.map(operand => operand.toString().length)\n  );\n  const answer = leftPadString(unPaddedAnswer, maxOperandLength).split(\"\");\n  operands = operands.map(operand =>\n    isOperatorBitShift ? operand : leftPadString(operand, maxOperandLength)\n  );\n\n  return {\n    isBinary,\n    operator,\n    operands,\n    answers: [answer],\n    promptLength: answer.length,\n    type: \"missingAnswer\"\n  };\n}\n","import {\n  makeRandomOperator,\n  calculateOutput,\n  leftPadString\n} from \"./bitwiseMath\";\nimport { missingComponentOperandCeiling, bitShiftCeiling, bitOperators } from \"./constants\";\n\nexport function makeMissingOperatorProblem() {\n  const { operator, operandCount, isOperatorBitShift } = makeRandomOperator(\n    false\n  );\n\n  // generate the operands\n  let operands = [];\n  if (!isOperatorBitShift) {\n    for (let i = 0; i < operandCount; i++) {\n      const base10Random = Math.floor(\n        Math.random() * missingComponentOperandCeiling\n      );\n      operands.push(base10Random);\n    }\n  } else {\n    const base10Random = Math.floor(\n      Math.random() * missingComponentOperandCeiling\n    );\n    operands.push(base10Random);\n    operands.push(Math.floor(Math.random() * bitShiftCeiling));\n  }\n\n  // generate the answer\n  const unPaddedOutput = calculateOutput(operator, operands);\n  const answers = findAllCorrectOperators(unPaddedOutput, operands).map(op => [\n    op\n  ]);\n\n  // convert operands to base-2\n  if (isOperatorBitShift) {\n    operands = [operands[0].toString(2), operands[1]];\n  } else {\n    operands = operands.map(op => op.toString(2));\n  }\n\n  // pad elements appropriately so base-2 operands\n  // and the answer will be of equal length\n  const maxOperandLength = Math.max(\n    ...operands.map(operand => operand.toString().length)\n  );\n  const output = leftPadString(unPaddedOutput, maxOperandLength).split(\"\");\n  operands = operands.map(operand =>\n    isOperatorBitShift ? operand : leftPadString(operand, maxOperandLength)\n  );\n\n  return {\n    answers,\n    promptLength: 1,\n    operands,\n    output,\n    type: \"missingOperator\",\n    __isOriginalOperatorBitShift: isOperatorBitShift // included just for tests\n  };\n}\n\nfunction findAllCorrectOperators(result, operands) {\n  return bitOperators.binary.filter(\n    operator => result === calculateOutput(operator, operands)\n  );\n}\n","import { conversionNumberCeiling } from \"./constants\"\n\nexport function makeConvertToBase10Problem() {\n    const answerNumber = Math.floor(Math.random() * conversionNumberCeiling);\n    const base2 = answerNumber.toString(2);\n    const answer = answerNumber.toString().split(\"\")\n\n    return {\n        base2,\n        answers: [answer],\n        promptLength: answer.length,\n        type: \"convertToBase10\"\n    }\n}\nexport function makeConvertToBase2Problem() {\n    const base10 = Math.floor(Math.random() * conversionNumberCeiling);\n    const answer = base10.toString(2).split(\"\");\n\n    return {\n        base10: base10.toString(),\n        answers: [answer],\n        promptLength: answer.length,\n        type: \"convertToBase2\"\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport ExternalResources from \"./components/ExternalResources\";\nimport AnswerInputs from \"./components/AnswerInputs\";\nimport { getPromptForType } from \"./components/prompts\";\nimport {\n  makeRandomProblem,\n  getAnswerOptionsForType,\n  getShouldShowInputHintsForType\n} from \"./logic\";\n\nexport default function App() {\n  // setup problem state\n  const [problem, setProblem] = useState(makeRandomProblem());\n  const answerOptions = getAnswerOptionsForType(problem.type);\n\n  // setup user answer state\n  const [userAnswer, setUserAnswer] = useState(\n    new Array(problem.promptLength).fill(\"\")\n  );\n  const hasPartialAnswer = userAnswer.findIndex(answer => answer !== \"\") !== -1;\n  const hasCompleteAnswer =\n    userAnswer.findIndex(answer => answer === \"\") === -1;\n\n  // setup active answer slot state\n  const [activeAnswer, setActiveAnswer] = useState(null);\n  const userActiveAnswerIndex = activeAnswer || 0;\n\n  // setup results state\n  const [isResultCorrect, setIsResultCorrect] = useState(null);\n  const hasResult = isResultCorrect !== null;\n\n  // setup event handlers\n  const handleKeyDown = e => {\n    const { key } = e;\n    if (key === \"Tab\" && activeAnswer <= problem.promptLength - 1) {\n      e.preventDefault();\n    }\n  };\n\n  const handleKeyUp = e => {\n    const { key, shiftKey } = e;\n    if (answerOptions.indexOf(key) !== -1) {\n      handleKeyboardAnswerUpdate(key);\n    } else if (/^\\d{1}$/.test(key)) {\n      const answerIndex = parseInt(key, 10) - 1;\n      if (answerIndex > answerOptions.length - 1) return;\n      handleKeyboardAnswerUpdate(answerOptions[answerIndex]);\n    } else if (key === \"Enter\") {\n      if (hasResult && isResultCorrect === true) {\n        handleNext();\n      } else {\n        handleSubmit();\n      }\n    } else if (key === \"n\") {\n      handleNext();\n    } else if (key === \"r\" || key === \"c\") {\n      handleResetAnswer();\n    } else if (key === \"Tab\") {\n      setActiveAnswer(activeAnswer + (shiftKey ? -1 : 1));\n      e.preventDefault();\n    } else if (key === \"Backspace\") {\n      handleBackspace();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", handleKeyUp, true);\n    document.addEventListener(\"keydown\", handleKeyDown, true);\n    return () => {\n      document.removeEventListener(\"keyup\", handleKeyUp, true);\n      document.removeEventListener(\"keydown\", handleKeyDown, true);\n    };\n  });\n\n  function handleKeyboardAnswerUpdate(key) {\n    if (\n      hasResult &&\n      !isResultCorrect &&\n      hasCompleteAnswer &&\n      userActiveAnswerIndex === problem.promptLength\n    ) {\n      resetAnswerValue(key);\n      return;\n    }\n\n    handleAnswerUpdate(userActiveAnswerIndex, key);\n    if (!hasCompleteAnswer) {\n      setActiveAnswer(activeAnswer + 1);\n    }\n  }\n\n  function handleSubmit() {\n    const isCorrect = !!problem.answers.find(\n      answer => userAnswer.join(\"\") === answer.join(\"\")\n    );\n    setIsResultCorrect(isCorrect);\n  }\n\n  function handleNext() {\n    const nextProblem = makeRandomProblem();\n    setProblem(nextProblem);\n    setUserAnswer(new Array(nextProblem.promptLength).fill(\"\"));\n    setIsResultCorrect(null);\n    setActiveAnswer(0);\n    document.activeElement.blur();\n  }\n\n  function handleResetAnswer() {\n    setUserAnswer(new Array(problem.promptLength).fill(\"\"));\n    setActiveAnswer(0);\n    setIsResultCorrect(null);\n    document.activeElement.blur();\n  }\n\n  function resetAnswerValue(key) {\n    const newUserAnswer = new Array(problem.promptLength).fill(\"\");\n    newUserAnswer[0] = key;\n    setUserAnswer(newUserAnswer);\n    setActiveAnswer(1);\n    setIsResultCorrect(null);\n  }\n\n  function handleAnswerUpdate(i, answer) {\n    setIsResultCorrect(null);\n    if (i > userAnswer.length - 1) return;\n    const currentAnswerCopy = userAnswer.slice(0);\n    currentAnswerCopy[i] = answer;\n    setUserAnswer(currentAnswerCopy);\n    document.activeElement.blur();\n  }\n\n  function handleBackspace() {\n    if (activeAnswer === 0) return;\n    const currentAnswerCopy = userAnswer.slice(0);\n    currentAnswerCopy[activeAnswer - 1] = \"\";\n    setUserAnswer(currentAnswerCopy);\n    setActiveAnswer(activeAnswer - 1);\n  }\n\n  function handleAnswerClick(answer) {\n    if (\n      hasResult &&\n      !isResultCorrect &&\n      hasCompleteAnswer &&\n      userActiveAnswerIndex === problem.promptLength\n    ) {\n      resetAnswerValue(answer);\n      return;\n    }\n    handleAnswerUpdate(userActiveAnswerIndex, answer);\n    if (!hasCompleteAnswer) {\n      setActiveAnswer(userActiveAnswerIndex + 1);\n    }\n    document.activeElement.blur();\n  }\n\n  // prepare for rendering\n\n  const Prompt = getPromptForType(problem.type);\n\n  const promptProps = {\n    problem,\n    userActiveAnswerIndex,\n    userAnswer\n  };\n\n  const inputsProps = {\n    answerOptions,\n    hasCorrectAnswer: hasResult && isResultCorrect,\n    shouldShowReset: hasPartialAnswer,\n    shouldShowHints: getShouldShowInputHintsForType(problem.type),\n    isBackspaceDisabled: userActiveAnswerIndex === 0\n  };\n\n  return (\n    <AppWrapper hasResult={hasResult} isCorrect={hasResult && isResultCorrect}>\n      <Logo>learn a bit</Logo>\n      <ExternalResources />\n      <PracticeProblem>\n        <Prompt onPromptClick={setActiveAnswer} {...promptProps} />\n        <AnswerInputs\n          onAnswerClick={handleAnswerClick}\n          onSubmitClick={handleSubmit}\n          onResetClick={handleResetAnswer}\n          onNextClick={handleNext}\n          onBackspaceClick={handleBackspace}\n          {...inputsProps}\n        />\n      </PracticeProblem>\n    </AppWrapper>\n  );\n}\n\nconst Logo = styled.h1`\n  font-family: \"Chakra Petch\", sans-serif;\n  text-align: center;\n  position: absolute;\n  margin: 0 auto;\n  top: 70px;\n  letter-spacing: 0.1rem;\n  color: #333;\n  font-size: 2.5rem;\n\n  @media (max-width: 500px) {\n    top: 7px;\n    left: 10px;\n    font-size: 1.5rem;\n    letter-spacing: .05rem;\n  }\n`;\n\nconst flashRed = keyframes`\n  from {\n    background-color: rgba(150,0,0,0.2);\n  }\n\n  to {\n    background-color: #fff;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  touch-action: manipulation; // prevent double touch to zoom on mobile\n  background-color: ${props => (props.isCorrect ? \"#e4ffe4\" : \"none\")};\n  transition: background-color 0.15s;\n\n  ${({ hasResult, isCorrect }) =>\n    hasResult &&\n    !isCorrect &&\n    css`\n      animation: ${flashRed} 1s linear;\n    `}\n`;\n\nconst PracticeProblem = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 1.5rem 0;\n  box-sizing: border-box;\n  width: 100%;\n  max-width: 600px;\n  min-height: 400px;\n  border-radius: 10px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
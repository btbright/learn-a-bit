{"version":3,"sources":["components/prompts/CommonUI.js","components/prompts/MissingOperatorPrompt.js","components/prompts/MissingAnswerPrompt.js","components/AnswerInputs.js","logic/bitwiseMath.js","logic/missingOperatorProblem.js","logic/missingAnswerProblem.js","logic/conversionProblem.js","App.js","components/prompts/ConvertToBase10Prompt.js","components/prompts/ConvertToBase2Prompt.js","serviceWorker.js","index.js"],"names":["Prompt","styled","div","_templateObject","_ref","hasLabels","css","_templateObject2","PromptInput","_templateObject3","props","isActive","hasAnswer","Operand","span","_templateObject4","_templateObject5","ConversionOperand","_templateObject6","Equality","_templateObject7","_ref2","shouldHaveTopMargin","_templateObject8","DeepEquality","react_default","a","createElement","EquationHalf","_templateObject9","_ref3","_templateObject10","Label","small","_templateObject11","AnswerSlots","_templateObject12","Output","MissingOperatorPrompt_templateObject","Operator","MissingAnswerPrompt_templateObject","AnswerInputs","answerOptions","hasCorrectAnswer","shouldShowReset","shouldShowHints","isBackspaceDisabled","onAnswerClick","onSubmitClick","onResetClick","onNextClick","onBackspaceClick","Inputs","Fragment","AnswerInputSection","map","answer","i","ButtonWrapper","key","Button","onClick","_","InputHint","InputSection","SubmitButton","index_es","icon","faCheck","ControlButton","isIcon","faUndo","isDisabled","faBackspace","SuccessButton","role","aria-label","AnswerInputs_templateObject","AnswerInputs_templateObject2","p","AnswerInputs_templateObject3","button","attrs","type","AnswerInputs_templateObject4","AnswerInputs_templateObject5","AnswerInputs_templateObject6","AnswerInputs_templateObject7","AnswerInputs_templateObject8","AnswerInputs_templateObject9","bitOperators","binary","unary","makeRandomOperator","operatorClass","arguments","length","undefined","Math","random","isBinary","classOperations","operator","floor","operandCount","isOperatorBitShift","leftPadString","strToPad","desiredLength","padCharacter","padLength","pad","Array","fill","join","concat","calculateOutput","operands","toString","split","bit","calculateBase10Output","operandCeiling","bitShiftCeiling","numberCeiling","problemGenerators","_makeRandomOperator","base10Random","push","unPaddedAnswer","op","maxOperandLength","max","apply","Object","toConsumableArray","operand","answers","promptLength","unPaddedOutput","result","filter","findAllCorrectOperators","output","__isOriginalOperatorBitShift","answerNumber","base2","base10","makeProblem","randomIndex","answerOptionsForType","missingAnswer","missingOperator","convertToBase10","convertToBase2","promptForType","userAnswer","userActiveAnswerIndex","problem","onPromptClick","slots","CommonUI_Prompt","MissingAnswerPrompt_Operator","CommonUI_DeepEquality","flashRed","keyframes","App_templateObject","AppWrapper","App_templateObject2","isCorrect","hasResult","App_templateObject3","PracticeProblem","App_templateObject4","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setProblem","_useState3","_useState4","setUserAnswer","_useState5","_useState6","activeAnswer","setActiveAnswer","_useState7","_useState8","setResult","hasPartialAnswer","findIndex","hasCompleteAnswer","handleKeyDown","e","preventDefault","handleKeyUp","shiftKey","indexOf","handleKeyboardAnswerUpdate","test","answerIndex","parseInt","handleNext","handleSubmit","handleResetAnswer","handleBackspace","resetAnswerValue","handleAnswerUpdate","find","nextProblem","document","activeElement","blur","newUserAnswer","currentAnswerCopy","slice","useEffect","addEventListener","removeEventListener","promptProps","inputsProps","assign","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.092cc57a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nexport const Prompt = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 29px;\n\n  p {\n    color: rgba(0, 0, 0, 0.8);\n    font-size: 2rem;\n  }\n\n  @media (max-width: 500px) {\n    flex-direction: column;\n    margin-bottom: 58px;\n  }\n\n  ${({ hasLabels }) =>\n    hasLabels &&\n    css`\n      align-items: flex-start;\n    `}\n`;\n\nexport const PromptInput = styled.div`\n  border: none;\n  margin: 0 4px;\n  font-size: 2rem;\n  width: 2.5rem;\n  height: 2.5rem;\n  outline: none;\n  text-align: center;\n  transition: border-color 0.05s, background-color 0.05;\n  color: rgba(0, 0, 0, 0.8);\n  background-color: ${props =>\n    props.isActive\n      ? \"rgba(0, 0, 0, 0.075)\"\n      : props.hasAnswer\n      ? \"rgba(0, 0, 0, 0.0)\"\n      : \"rgba(0, 0, 0, 0.02)\"};\n  border-radius: 0.2rem;\n  cursor: pointer;\n`;\n\nexport const Operator = styled.span`\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 2rem;\n`;\n\nexport const Operand = styled.span`\n  color: rgba(0, 0, 0, 0.8);\n  font-size: 2rem;\n  margin: 0 1rem;\n\n  &:first-child {\n    margin-left: 0;\n  }\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const ConversionOperand = styled(Operand)`\n  margin: 0;\n`;\n\nconst Equality = styled.div`\n  color: rgba(0, 0, 0, 0.3);\n  font-size: 1.4rem;\n  margin: 0 1rem;\n\n  ${({ shouldHaveTopMargin }) =>\n    shouldHaveTopMargin &&\n    css`\n      margin-top: 5px;\n    `}\n`;\n\nexport const DeepEquality = props => <Equality {...props}>===</Equality>;\n\nexport const EquationHalf = styled.div`\n  display: flex;\n\n  ${({ hasLabels }) =>\n    hasLabels &&\n    css`\n      flex-direction: column;\n      align-items: center;\n    `}\n\n  @media (max-width: 500px) {\n    margin: 1rem 0;\n  }\n`;\n\nexport const Label = styled.small`\n  font-size: 0.8rem;\n  color: rgba(0, 0, 0, 0.2);\n  margin-top: 14px;\n`;\n\nexport const AnswerSlots = styled.div`\n  display: flex;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  Operand,\n  DeepEquality\n} from \"./CommonUI\";\n\nexport default function MissingOperatorPrompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { operands, output } = problem;\n  return (\n    <Prompt>\n      <EquationHalf>\n        <Operand>{operands[0]}</Operand>{\" \"}\n        <PromptInput\n          isActive={0 === userActiveAnswerIndex}\n          hasAnswer={userAnswer[0] !== \"\"}\n          onClick={_ => onPromptClick(0)}\n        >\n          {userAnswer[0]}\n        </PromptInput>\n        <Operand>{operands[1]}</Operand>{\" \"}\n      </EquationHalf>\n      <DeepEquality />\n      <EquationHalf>\n        <Output>{output}</Output>\n      </EquationHalf>\n    </Prompt>\n  );\n}\n\nconst Output = styled(Operand)``;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  Operand,\n  DeepEquality\n} from \"./CommonUI\";\n\nexport default function MissingAnswerPrompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { isBinary, operands, operator, promptLength } = problem;\n  const slots = new Array(promptLength).fill(\"\");\n  return (\n    <Prompt>\n      <EquationHalf>\n        {isBinary && <Operand>{operands[0]}</Operand>}{\" \"}\n        <Operator>{operator}</Operator>\n        {isBinary && \" \"}\n        <Operand>{operands[isBinary ? 1 : 0]}</Operand>{\" \"}\n      </EquationHalf>\n      <DeepEquality />\n      <EquationHalf>\n        {slots.map((_, i) => (\n          <PromptInput\n            key={i}\n            isActive={i === userActiveAnswerIndex}\n            hasAnswer={userAnswer[i] !== \"\"}\n            onClick={_ => onPromptClick(i)}\n          >\n            {userAnswer[i]}\n          </PromptInput>\n        ))}\n      </EquationHalf>\n    </Prompt>\n  );\n}\n\nconst Operator = styled.span`\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 2rem;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBackspace,\n  faUndo,\n  faCheck\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function AnswerInputs(props) {\n  const {\n    answerOptions,\n    hasCorrectAnswer,\n    shouldShowReset,\n    shouldShowHints,\n    isBackspaceDisabled\n  } = props;\n\n  const {\n    onAnswerClick,\n    onSubmitClick,\n    onResetClick,\n    onNextClick,\n    onBackspaceClick\n  } = props;\n\n  return (\n    <Inputs>\n      {!hasCorrectAnswer && (\n        <>\n          <AnswerInputSection>\n            {answerOptions.map((answer, i) => (\n              <ButtonWrapper key={answer}>\n                <Button onClick={_ => onAnswerClick(answer)}>{answer}</Button>\n                {shouldShowHints && <InputHint> {i + 1}</InputHint>}\n              </ButtonWrapper>\n            ))}\n          </AnswerInputSection>\n          <InputSection>\n            <SubmitButton onClick={onSubmitClick}>\n              Submit&nbsp;\n              <FontAwesomeIcon icon={faCheck} />\n            </SubmitButton>\n            {shouldShowReset ? (\n              <ControlButton isIcon={true} onClick={onResetClick}>\n                <FontAwesomeIcon icon={faUndo} />\n              </ControlButton>\n            ) : (\n              <ControlButton onClick={onNextClick}>New</ControlButton>\n            )}\n            <ControlButton\n              isDisabled={isBackspaceDisabled}\n              isIcon={true}\n              onClick={onBackspaceClick}\n            >\n              <FontAwesomeIcon icon={faBackspace} />\n            </ControlButton>\n          </InputSection>\n        </>\n      )}\n      {hasCorrectAnswer && (\n        <SuccessButton onClick={onNextClick} isActive={true}>\n          Continue&nbsp;&nbsp;\n          <span role=\"img\" aria-label=\"Hooray!\">\n            🎉\n          </span>\n        </SuccessButton>\n      )}\n    </Inputs>\n  );\n}\n\nconst Inputs = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: flex-start;\n  width: 40%;\n  max-height: 200px;\n  min-height: 120px;\n  margin-top: 4rem;\n\n  @media (max-width: 500px) {\n    width: 90%;\n  }\n  @media (max-width: 500px) {\n    position: absolute;\n    bottom: 50px;\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin: 0 4px;\n\n  @media (max-width: 500px) {\n    width: auto;\n    margin: 4px;\n  }\n`;\n\nconst InputHint = styled.p`\n  font-size: 0.5rem;\n  color: rgba(0, 0, 0, 0.3);\n  margin: 5px 0 0px;\n\n  @media (max-width: 500px) {\n    display: none;\n  }\n`;\n\nconst Button = styled.button.attrs({ type: \"button\" })`\n  height: 40px;\n  width: 100%;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  color: rgba(0, 0, 0, 0.7);\n  font-size: 1.2rem;\n  transition: background-color 0.2s;\n  cursor: pointer;\n  outline: none;\n  margin: 0 4px;\n  background-color: ${props =>\n    props.isActive ? \"rgba(0, 0, 0, 0.03)\" : \"rgba(0, 0, 0, 0.02)\"};\n  border-color: ${props =>\n    props.isActive ? \"rgba(0, 0, 0, 0.15)\" : \"rgba(0, 0, 0, 0.12)\"};\n\n  &:hover,\n  &:focus {\n    background-color: rgba(0, 0, 0, 0.03);\n    border-color: rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst SubmitButton = styled(Button)`\n  width: 100%;\n  font-size: 0.85rem;\n  color: rgba(0, 0, 0, 0.3);\n`;\n\nconst ControlButton = styled(Button)`\n  color: rgba(0, 0, 0, 0.3);\n  flex-shrink: 0;\n  width: 40px;\n  opacity: ${props => (props.isDisabled ? 0.2 : 1)};\n  font-size: ${props => (props.isIcon ? \"1.2rem\" : \"0.7rem\")};\n`;\n\nconst SuccessButton = styled(Button)`\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 90px;\n`;\n\nconst InputSection = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-top: 4px;\n`;\n\nconst AnswerInputSection = styled(InputSection)`\n  min-height: 130px;\n\n  @media (max-width: 500px) {\n    flex-wrap: wrap;\n  }\n`;\n","export const bitOperators = {\n  binary: [\"&\", \"|\", \"^\", \"<<\", \">>\"],\n  unary: [\"~\"]\n};\n\nexport function makeRandomOperator(shouldIncludeUnary = true) {\n  const operatorClass = shouldIncludeUnary\n    ? Math.random() < bitOperators.unary.length / bitOperators.binary.length\n      ? \"unary\"\n      : \"binary\"\n    : \"binary\";\n  const isBinary = operatorClass === \"binary\";\n  const classOperations = bitOperators[operatorClass];\n  const operator =\n    classOperations[Math.floor(Math.random() * classOperations.length)];\n  const operandCount = isBinary ? 2 : 1;\n  const isOperatorBitShift = operator === \"<<\" || operator === \">>\";\n\n  return {\n    operator,\n    operandCount,\n    isOperatorBitShift,\n    isBinary\n  };\n}\n\nexport function leftPadString(strToPad, desiredLength, padCharacter = \"0\") {\n  const padLength =\n    desiredLength > strToPad.length ? desiredLength - strToPad.length : 0;\n  const pad = new Array(padLength).fill(padCharacter).join(\"\");\n  return `${pad}${strToPad}`;\n}\n\nexport function calculateOutput(operator, operands) {\n  const base10Answer = calculateBase10Output(operator, operands);\n  return base10Answer.toString(2);\n}\n\nexport function calculateBase10Output(operator, operands) {\n  switch (operator) {\n    case \"&\":\n      return operands[0] & operands[1];\n    case \"|\":\n      return operands[0] | operands[1];\n    case \"^\":\n      return operands[0] ^ operands[1];\n    case \"~\":\n      // javascript uses 32 bit signed ints in two's complement format\n      // which returns a different result for bitwise not. one's complement\n      // is easier to learn\n      return bitwiseNotOnesComplement(operands[0]);\n    case \"<<\":\n      return operands[0] << operands[1];\n    case \">>\":\n      return operands[0] >> operands[1];\n    default:\n      return;\n  }\n}\n\nexport function bitwiseNotOnesComplement(num) {\n  const binaryString = num.toString(2);\n  return binaryString\n    .split(\"\")\n    .map(bit => (bit === \"0\" ? \"1\" : \"0\"))\n    .join(\"\");\n}\n","import {\n  makeRandomOperator,\n  calculateOutput,\n  leftPadString,\n  bitOperators\n} from \"./bitwiseMath\";\n\nconst operandCeiling = 16;\nconst bitShiftCeiling = 3;\n\nexport function makeMissingOperatorProblem() {\n  const { operator, operandCount, isOperatorBitShift } = makeRandomOperator(\n    false\n  );\n\n  // generate the operands\n  let operands = [];\n  if (!isOperatorBitShift) {\n    for (let i = 0; i < operandCount; i++) {\n      const base10Random = Math.floor(Math.random() * operandCeiling);\n      operands.push(base10Random);\n    }\n  } else {\n    const base10Random = Math.floor(Math.random() * operandCeiling);\n    operands.push(base10Random);\n    operands.push(Math.floor(Math.random() * bitShiftCeiling));\n  }\n\n  // generate the answer\n  const unPaddedOutput = calculateOutput(operator, operands);\n  const answers = findAllCorrectOperators(unPaddedOutput, operands).map(op => [op]);\n\n  // convert operands to base-2\n  if (isOperatorBitShift) {\n    operands = [operands[0].toString(2), operands[1]];\n  } else {\n    operands = operands.map(op => op.toString(2));\n  }\n\n  // pad elements appropriately so base-2 operands\n  // and the answer will be of equal length\n  const maxOperandLength = Math.max(\n    ...operands.map(operand => operand.toString().length)\n  );\n  const output = leftPadString(unPaddedOutput, maxOperandLength).split(\"\");\n  operands = operands.map(operand =>\n    isOperatorBitShift ? operand : leftPadString(operand, maxOperandLength)\n  );\n\n  return {\n    answers,\n    promptLength: 1,\n    operands,\n    output,\n    type: \"missingOperator\",\n    __isOriginalOperatorBitShift: isOperatorBitShift // included just for tests\n  };\n}\n\nfunction findAllCorrectOperators(result, operands) {\n  return bitOperators.binary.filter(operator => result === calculateOutput(operator, operands));\n}\n","import { makeRandomOperator, calculateOutput, leftPadString } from \"./bitwiseMath\";\n\nconst operandCeiling = 16;\nconst bitShiftCeiling = 3;\n\nexport function makeMissingAnswerProblem() {\n  const {\n    operator,\n    operandCount,\n    isOperatorBitShift,\n    isBinary\n  } = makeRandomOperator();\n\n  // generate the operands\n  let operands = [];\n  if (!isOperatorBitShift) {\n    for (let i = 0; i < operandCount; i++) {\n      const base10Random = Math.floor(Math.random() * operandCeiling);\n      operands.push(base10Random);\n    }\n  } else {\n    const base10Random = Math.floor(Math.random() * operandCeiling);\n    operands.push(base10Random);\n    operands.push(Math.floor(Math.random() * bitShiftCeiling));\n  }\n\n  // generate the answer\n  const unPaddedAnswer = calculateOutput(operator, operands);\n\n  // convert operands to base-2\n  if (isOperatorBitShift) {\n    operands = [operands[0].toString(2), operands[1]];\n  } else {\n    operands = operands.map(op => op.toString(2));\n  }\n\n  // pad elements appropriately so base-2 operands\n  // and the answer will be of equal length\n  const maxOperandLength = Math.max(\n    ...operands.map(operand => operand.toString().length)\n  );\n  const answer = leftPadString(unPaddedAnswer, maxOperandLength).split(\"\");\n  operands = operands.map(operand =>\n    isOperatorBitShift ? operand : leftPadString(operand, maxOperandLength)\n  );\n\n  return {\n    isBinary,\n    operator,\n    operands,\n    answers: [answer],\n    promptLength: answer.length,\n    type: \"missingAnswer\"\n  };\n}\n","\nconst numberCeiling = 16;\n\nexport function makeConvertToBase10Problem() {\n    const answerNumber = Math.floor(Math.random() * numberCeiling);\n    const base2 = answerNumber.toString(2);\n    const answer = answerNumber.toString().split(\"\")\n\n    return {\n        base2,\n        answers: [answer],\n        promptLength: answer.length,\n        type: \"convertToBase10\"\n    }\n}\nexport function makeConvertToBase2Problem() {\n    const base10 = Math.floor(Math.random() * numberCeiling);\n    const answer = base10.toString(2).split(\"\");\n\n    return {\n        base10: base10.toString(),\n        answers: [answer],\n        promptLength: answer.length,\n        type: \"convertToBase2\"\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport MissingOperatorPrompt from \"./components/prompts/MissingOperatorPrompt\";\nimport MissingAnswerPrompt from \"./components/prompts/MissingAnswerPrompt\";\nimport ConvertToBase10Prompt from \"./components/prompts/ConvertToBase10Prompt\";\nimport ConvertToBase2Prompt from \"./components/prompts/ConvertToBase2Prompt\";\nimport AnswerInputs from \"./components/AnswerInputs\";\nimport { makeMissingOperatorProblem } from \"./logic/missingOperatorProblem\";\nimport { makeMissingAnswerProblem } from \"./logic/missingAnswerProblem\";\nimport {\n  makeConvertToBase10Problem,\n  makeConvertToBase2Problem\n} from \"./logic/conversionProblem\";\nimport { bitOperators } from \"./logic/bitwiseMath\";\n\nconst problemGenerators = [\n  makeMissingAnswerProblem,\n  makeMissingOperatorProblem,\n  makeConvertToBase10Problem,\n  makeConvertToBase2Problem\n];\n\nfunction makeProblem() {\n  const randomIndex = Math.floor(Math.random() * problemGenerators.length);\n  return problemGenerators[randomIndex]();\n}\n\nconst answerOptionsForType = {\n  missingAnswer: [\"1\", \"0\"],\n  missingOperator: bitOperators.binary,\n  convertToBase10: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n  convertToBase2: [\"1\", \"0\"]\n};\n\nconst promptForType = {\n  missingAnswer: MissingAnswerPrompt,\n  missingOperator: MissingOperatorPrompt,\n  convertToBase10: ConvertToBase10Prompt,\n  convertToBase2: ConvertToBase2Prompt\n};\n\nexport default function App() {\n  const [problem, setProblem] = useState(makeProblem());\n\n  const [userAnswer, setUserAnswer] = useState(\n    new Array(problem.promptLength).fill(\"\")\n  );\n\n  const [activeAnswer, setActiveAnswer] = useState(null);\n  const [result, setResult] = useState(null);\n  const hasResult = result !== null;\n\n  const userActiveAnswerIndex = activeAnswer || 0;\n\n  const answerOptions = answerOptionsForType[problem.type];\n\n  const hasPartialAnswer = userAnswer.findIndex(answer => answer !== \"\") !== -1;\n  const hasCompleteAnswer =\n    userAnswer.findIndex(answer => answer === \"\") === -1;\n\n  const handleKeyDown = e => {\n    const { key } = e;\n    if (key === \"Tab\" && activeAnswer <= problem.promptLength - 1) {\n      e.preventDefault();\n    }\n  };\n\n  const handleKeyUp = e => {\n    const { key, shiftKey } = e;\n    if (answerOptions.indexOf(key) !== -1) {\n      handleKeyboardAnswerUpdate(key);\n    } else if (/^\\d{1}$/.test(key)) {\n      const answerIndex = parseInt(key, 10) - 1;\n      if (answerIndex > answerOptions.length - 1) return;\n      handleKeyboardAnswerUpdate(answerOptions[answerIndex]);\n    } else if (key === \"Enter\") {\n      if (hasResult && result === true) {\n        handleNext();\n      } else {\n        handleSubmit();\n      }\n    } else if (key === \"n\") {\n      handleNext();\n    } else if (key === \"r\" || key === \"c\") {\n      handleResetAnswer();\n    } else if (key === \"Tab\") {\n      setActiveAnswer(activeAnswer + (shiftKey ? -1 : 1));\n      e.preventDefault();\n    } else if (key === \"Backspace\") {\n      handleBackspace();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", handleKeyUp, true);\n    document.addEventListener(\"keydown\", handleKeyDown, true);\n    return () => {\n      document.removeEventListener(\"keyup\", handleKeyUp, true);\n      document.removeEventListener(\"keydown\", handleKeyDown, true);\n    };\n  });\n\n  function handleKeyboardAnswerUpdate(key) {\n    if (\n      hasResult &&\n      !result &&\n      hasCompleteAnswer &&\n      userActiveAnswerIndex === problem.promptLength\n    ) {\n      resetAnswerValue(key);\n      return;\n    }\n\n    handleAnswerUpdate(userActiveAnswerIndex, key);\n    if (!hasCompleteAnswer) {\n      setActiveAnswer(activeAnswer + 1);\n    }\n  }\n\n  function handleSubmit() {\n    const isCorrect = !!problem.answers.find(\n      answer => userAnswer.join(\"\") === answer.join(\"\")\n    );\n    setResult(isCorrect);\n  }\n\n  function handleNext() {\n    const nextProblem = makeProblem();\n    setProblem(nextProblem);\n    setUserAnswer(new Array(nextProblem.promptLength).fill(\"\"));\n    setResult(null);\n    setActiveAnswer(0);\n    document.activeElement.blur();\n  }\n\n  function handleResetAnswer() {\n    setUserAnswer(new Array(problem.promptLength).fill(\"\"));\n    setActiveAnswer(0);\n    setResult(null);\n    document.activeElement.blur();\n  }\n\n  function resetAnswerValue(key) {\n    const newUserAnswer = new Array(problem.promptLength).fill(\"\");\n    newUserAnswer[0] = key;\n    setUserAnswer(newUserAnswer);\n    setActiveAnswer(1);\n    setResult(null);\n  }\n\n  function handleAnswerUpdate(i, answer) {\n    setResult(null);\n    if (i > userAnswer.length - 1) return;\n    const currentAnswerCopy = userAnswer.slice(0);\n    currentAnswerCopy[i] = answer;\n    setUserAnswer(currentAnswerCopy);\n    document.activeElement.blur();\n  }\n\n  function handleBackspace() {\n    if (activeAnswer === 0) return;\n    const currentAnswerCopy = userAnswer.slice(0);\n    currentAnswerCopy[activeAnswer - 1] = \"\";\n    setUserAnswer(currentAnswerCopy);\n    setActiveAnswer(activeAnswer - 1);\n  }\n\n  function handleAnswerClick(answer) {\n    if (\n      hasResult &&\n      !result &&\n      hasCompleteAnswer &&\n      userActiveAnswerIndex === problem.promptLength\n    ) {\n      resetAnswerValue(answer);\n      return;\n    }\n    handleAnswerUpdate(userActiveAnswerIndex, answer);\n    if (!hasCompleteAnswer) {\n      setActiveAnswer(userActiveAnswerIndex + 1);\n    }\n    document.activeElement.blur();\n  }\n\n  const Prompt = promptForType[problem.type];\n\n  const promptProps = {\n    problem,\n    userActiveAnswerIndex,\n    userAnswer\n  };\n\n  const inputsProps = {\n    answerOptions,\n    hasCorrectAnswer: hasResult && result,\n    shouldShowReset: hasPartialAnswer,\n    shouldShowHints: problem.type === \"missingOperator\",\n    isBackspaceDisabled: userActiveAnswerIndex === 0\n  };\n\n  return (\n    <AppWrapper hasResult={hasResult} isCorrect={hasResult && result}>\n      <p>learn a bit</p>\n      <PracticeProblem>\n        <Prompt onPromptClick={setActiveAnswer} {...promptProps} />\n        <AnswerInputs\n          onAnswerClick={handleAnswerClick}\n          onSubmitClick={handleSubmit}\n          onResetClick={handleResetAnswer}\n          onNextClick={handleNext}\n          onBackspaceClick={handleBackspace}\n          {...inputsProps}\n        />\n      </PracticeProblem>\n    </AppWrapper>\n  );\n}\n\nconst flashRed = keyframes`\n  from {\n    background-color: rgba(150,0,0,0.2);\n  }\n\n  to {\n    background-color: #fff;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  touch-action: manipulation; // prevent double touch to zoom on mobile\n  background-color: ${props => (props.isCorrect ? \"#e4ffe4\" : \"none\")};\n  transition: background-color 0.15s;\n\n  ${({ hasResult, isCorrect }) =>\n    hasResult &&\n    !isCorrect &&\n    css`\n      animation: ${flashRed} 1s linear;\n    `}\n`;\n\nconst PracticeProblem = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 1.5rem 0;\n  box-sizing: border-box;\n  width: 100%;\n  max-width: 600px;\n  min-height: 400px;\n  border-radius: 10px;\n`;\n","import React from \"react\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  ConversionOperand,\n  DeepEquality,\n  Label,\n  AnswerSlots\n} from \"./CommonUI\";\n\nexport default function ConvertToBase10Prompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { base2, promptLength } = problem;\n  const slots = new Array(promptLength).fill(\"\");\n  return (\n    <Prompt hasLabels={true}>\n      <EquationHalf hasLabels={true}>\n        <ConversionOperand>{base2}</ConversionOperand>\n        <Label>base 2</Label>\n      </EquationHalf>\n      <DeepEquality shouldHaveTopMargin={true} />\n      <EquationHalf hasLabels={true}>\n        <AnswerSlots>\n          {slots.map((_, i) => (\n            <PromptInput\n              key={i}\n              isActive={i === userActiveAnswerIndex}\n              hasAnswer={userAnswer[i] !== \"\"}\n              onClick={_ => onPromptClick(i)}\n            >\n              {userAnswer[i]}\n            </PromptInput>\n          ))}\n        </AnswerSlots>\n        <Label>base 10</Label>\n      </EquationHalf>\n    </Prompt>\n  );\n}","import React from \"react\";\nimport {\n  PromptInput,\n  Prompt,\n  EquationHalf,\n  ConversionOperand,\n  DeepEquality,\n  Label,\n  AnswerSlots\n} from \"./CommonUI\";\n\nexport default function ConvertToBase2Prompt(props) {\n  const { userAnswer, userActiveAnswerIndex, problem, onPromptClick } = props;\n  const { base10, promptLength } = problem;\n  const slots = new Array(promptLength).fill(\"\");\n  return (\n    <Prompt hasLabels={true}>\n      <EquationHalf hasLabels={true}>\n        <ConversionOperand>{base10}</ConversionOperand>\n        <Label>base 10</Label>\n      </EquationHalf>\n      <DeepEquality shouldHaveTopMargin={true} />\n      <EquationHalf hasLabels={true}>\n        <AnswerSlots>\n          {slots.map((_, i) => (\n            <PromptInput\n              key={i}\n              isActive={i === userActiveAnswerIndex}\n              hasAnswer={userAnswer[i] !== \"\"}\n              onClick={_ => onPromptClick(i)}\n            >\n              {userAnswer[i]}\n            </PromptInput>\n          ))}\n        </AnswerSlots>\n        <Label>base 2</Label>\n      </EquationHalf>\n    </Prompt>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}